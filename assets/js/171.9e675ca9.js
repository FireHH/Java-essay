(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{544:function(s,t,a){"use strict";a.r(t);var n=a(7),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#前言"}},[s._v("前言")])]),t("li",[t("a",{attrs:{href:"#_1-类定义"}},[s._v("1. 类定义")])]),t("li",[t("a",{attrs:{href:"#_2-类对象"}},[s._v("2. 类对象")])]),t("li",[t("a",{attrs:{href:"#_3-属性访问"}},[s._v("3. 属性访问")])]),t("li",[t("a",{attrs:{href:"#_4-python内置类属性"}},[s._v("4. Python内置类属性")])]),t("li",[t("a",{attrs:{href:"#_5-python对象销毁-垃圾回收"}},[s._v("5. python对象销毁(垃圾回收)")])]),t("li",[t("a",{attrs:{href:"#_6-类的继承"}},[s._v("6. 类的继承")])]),t("li",[t("a",{attrs:{href:"#_7-方法重写"}},[s._v("7. 方法重写")])]),t("li",[t("a",{attrs:{href:"#_8-类属性与方法"}},[s._v("8. 类属性与方法")]),t("ul",[t("li",[t("a",{attrs:{href:"#单下划线、双下划线、头尾双下划线说明"}},[s._v("单下划线、双下划线、头尾双下划线说明")])])])])])]),t("p"),s._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("p",[s._v("Python从设计之初就已经是一门面向对象的语言，正因为如此，在Python中创建一个类和对象是很容易的。本章节我们将详细介绍Python的面向对象编程。")]),s._v(" "),t("ul",[t("li",[s._v("类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。")]),s._v(" "),t("li",[s._v("类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。")]),s._v(" "),t("li",[s._v("数据成员：类变量或者实例变量, 用于处理类及其实例对象的相关的数据。")]),s._v(" "),t("li",[s._v("方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。")]),s._v(" "),t("li",[s._v("局部变量：定义在方法中的变量，只作用于当前实例的类。")]),s._v(" "),t("li",[s._v("实例变量：在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。")]),s._v(" "),t("li",[s._v('继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟"是一个（is-a）"关系（例图，Dog是一个Animal）。')]),s._v(" "),t("li",[s._v("实例化：创建一个类的实例，类的具体对象。")]),s._v(" "),t("li",[s._v("方法：类中定义的函数。")]),s._v(" "),t("li",[s._v("对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。")])]),s._v(" "),t("h2",{attrs:{id:"_1-类定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-类定义"}},[s._v("#")]),s._v(" 1. 类定义")]),s._v(" "),t("p",[s._v("我们可以使用"),t("code",[s._v("class")]),s._v("语句来定义一个类，class后面跟着类名，类名通常是大写字母开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的，如果没有合适的继承类，就使用object类，这是所有类最终都会继承的类。")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'类的帮助信息'")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 类的文档字符串")]),s._v("\n    class_suite  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 类体")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"_2-类对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-类对象"}},[s._v("#")]),s._v(" 2. 类对象")]),s._v(" "),t("p",[s._v("类对象支持两种操作：属性引用和实例化。")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""一个简单的类实例"""')]),s._v("\n    i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12345")]),s._v("\n    name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'runoob'")]),s._v("\n    \n    __init__"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello world'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 实例化类")]),s._v("\nx "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" MyClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'test'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 访问类的属性和方法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MyClass 类的属性 i 为："')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MyClass 类的方法 f 输出为："')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("f"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("ul",[t("li",[t("p",[s._v("name 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。")])]),s._v(" "),t("li",[t("p",[s._v("第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法")])]),s._v(" "),t("li",[t("p",[s._v("self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。")])])]),s._v(" "),t("blockquote",[t("p",[s._v("类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。")])]),s._v(" "),t("h2",{attrs:{id:"_3-属性访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-属性访问"}},[s._v("#")]),s._v(" 3. 属性访问")]),s._v(" "),t("p",[s._v("你也可以使用以下函数的方式来访问属性：")]),s._v(" "),t("ul",[t("li",[s._v("getattr(obj, name[, default]) : 访问对象的属性。")]),s._v(" "),t("li",[s._v("hasattr(obj,name) : 检查是否存在一个属性。")]),s._v(" "),t("li",[s._v("setattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。")]),s._v(" "),t("li",[s._v("delattr(obj, name) : 删除属性。")])]),s._v(" "),t("h2",{attrs:{id:"_4-python内置类属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-python内置类属性"}},[s._v("#")]),s._v(" 4. Python内置类属性")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("dict")]),s._v(" : 类的属性（包含一个字典，由类的数据属性组成）")]),s._v(" "),t("li",[t("strong",[s._v("doc")]),s._v(" :类的文档字符串")]),s._v(" "),t("li",[t("strong",[s._v("name")]),s._v(": 类名")]),s._v(" "),t("li",[t("strong",[s._v("module")]),s._v(": 类定义所在的模块（类的全名是'"),t("strong",[s._v("main")]),s._v(".className'，如果类位于一个导入模块mymod中，那么className."),t("strong",[s._v("module")]),s._v(" 等于 mymod）")]),s._v(" "),t("li",[t("strong",[s._v("bases")]),s._v(" : 类的所有父类构成元素（包含了一个由所有父类组成的元组）")])]),s._v(" "),t("h2",{attrs:{id:"_5-python对象销毁-垃圾回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-python对象销毁-垃圾回收"}},[s._v("#")]),s._v(" 5. python对象销毁(垃圾回收)")]),s._v(" "),t("p",[s._v("Python 使用了引用计数这一简单技术来跟踪和回收垃圾。")]),s._v(" "),t("p",[s._v("在 Python 内部记录着所有使用中的对象各有多少引用。 一个内部跟踪变量，称为一个引用计数器。")]),s._v(" "),t("p",[s._v('当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是"立即"的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。')]),s._v(" "),t("p",[s._v("垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（即未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。")]),s._v(" "),t("p",[s._v("析构函数 "),t("strong",[s._v("del")]),s._v(" ，__del__在对象销毁的时候被调用，当对象不再被使用时，__del__方法运行")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Point")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x\n        self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("__del__")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        class_name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__class__"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__name__\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("class_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"销毁"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\npt1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Point"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\npt2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pt1\npt3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pt1\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pt1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pt2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pt3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印对象的id")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("del")]),s._v(" pt1\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("del")]),s._v(" pt2\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("del")]),s._v(" pt3\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h2",{attrs:{id:"_6-类的继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-类的继承"}},[s._v("#")]),s._v(" 6. 类的继承")]),s._v(" "),t("p",[s._v("面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的,通过继承创建的新类称为子类或派生类，被继承的类称为基类、父类或超类。")]),s._v(" "),t("p",[s._v("继承语法：")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("BaseClassName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("Python可以多继承，继承多个类")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("C")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 继承类 A 和 B")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"_7-方法重写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-方法重写"}},[s._v("#")]),s._v(" 7. 方法重写")]),s._v(" "),t("p",[s._v("如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法")]),s._v(" "),t("h2",{attrs:{id:"_8-类属性与方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-类属性与方法"}},[s._v("#")]),s._v(" 8. 类属性与方法")]),s._v(" "),t("ul",[t("li",[s._v("类的私有属性")])]),s._v(" "),t("p",[s._v("__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。")]),s._v(" "),t("ul",[t("li",[s._v("类的方法")])]),s._v(" "),t("p",[s._v("在类的内部，使用 def 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self,且为第一个参数")]),s._v(" "),t("ul",[t("li",[s._v("类的私有方法")])]),s._v(" "),t("p",[s._v("__private_method：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 self.__private_methods")]),s._v(" "),t("blockquote",[t("p",[s._v("Python不允许实例化的类访问私有数据，但你可以使用 object._className__attrName（ 对象名._类名__私有属性名 ）访问属性")])]),s._v(" "),t("h3",{attrs:{id:"单下划线、双下划线、头尾双下划线说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单下划线、双下划线、头尾双下划线说明"}},[s._v("#")]),s._v(" 单下划线、双下划线、头尾双下划线说明")]),s._v(" "),t("p",[t("strong",[s._v("foo")]),s._v(": 定义的是特殊方法，一般是系统定义名字 ，类似 "),t("strong",[s._v("init")]),s._v("() 之类的。")]),s._v(" "),t("p",[s._v("_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *")]),s._v(" "),t("p",[s._v("__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。")])])}),[],!1,null,null,null);t.default=e.exports}}]);