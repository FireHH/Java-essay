(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{462:function(r,t,n){"use strict";n.r(t);var i=n(7),s=Object(i.a)({},(function(){var r=this,t=r._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#springboot是什么"}},[r._v("SpringBoot是什么")])]),t("li",[t("a",{attrs:{href:"#spring、springmvc、springboot是什么关系"}},[r._v("Spring、SpringMvc、SpringBoot是什么关系")]),t("ul",[t("li",[t("a",{attrs:{href:"#spring"}},[r._v("Spring")])]),t("li",[t("a",{attrs:{href:"#springmvc"}},[r._v("SpringMvc")])]),t("li",[t("a",{attrs:{href:"#springboot"}},[r._v("SpringBoot")])])])]),t("li",[t("a",{attrs:{href:"#约定优于配置"}},[r._v("约定优于配置")])]),t("li",[t("a",{attrs:{href:"#最后"}},[r._v("最后")])])])]),t("p"),r._v(" "),t("h2",{attrs:{id:"springboot是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springboot是什么"}},[r._v("#")]),r._v(" SpringBoot是什么")]),r._v(" "),t("p",[r._v("从本质上来说，springboot是一个专注于框架的框架。Spring Boot就是对各种框架的整合，\n让他们集成在一起更加简单，简化了我们在集成过程中的模板化配置，它做了那些没有它你自己也会去做的Spring Bean配置。\n你不用再写这些样板配置了，可以专注于应用程序的逻辑，这些才是应用程序独一无二的东西。")]),r._v(" "),t("h2",{attrs:{id:"spring、springmvc、springboot是什么关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring、springmvc、springboot是什么关系"}},[r._v("#")]),r._v(" Spring、SpringMvc、SpringBoot是什么关系")]),r._v(" "),t("h3",{attrs:{id:"spring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[r._v("#")]),r._v(" Spring")]),r._v(" "),t("p",[r._v("Spring是一个轻量级的控制反转，依赖注入，和面向切面编程的Java框架，对象的创建以及生命周期都由Spring管理，基于配置文件Xml中\n声明Bean的方式来管理依赖对象，让你能开发更加可靠，易扩展，易管理的应用程序。")]),r._v(" "),t("h3",{attrs:{id:"springmvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springmvc"}},[r._v("#")]),r._v(" SpringMvc")]),r._v(" "),t("p",[r._v("SpringMvc是基于Spring开发出来的MVC模式的框架，Model-View-Controller，底层基于Dispatcher Servlet来控制整个前端到\n后端的一个完整请求响应过程。相比较于传统的Servlet模式开发，更加简单容易。但是其Xml配置文件仍然比较繁琐。")]),r._v(" "),t("h3",{attrs:{id:"springboot"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springboot"}},[r._v("#")]),r._v(" SpringBoot")]),r._v(" "),t("p",[r._v("SpringBoot对Spring及SpringMvc的缺点进行改善和优化，基于约定优于配置的思想，\n开发人员不必在配置与逻辑业务之间进行思维的切换，去除了繁琐的xml配置，内部继承web容器，能快速搭建开发\n单体应用程序，程序员专注于业务逻辑的开发，提高开发效率。")]),r._v(" "),t("h2",{attrs:{id:"约定优于配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#约定优于配置"}},[r._v("#")]),r._v(" 约定优于配置")]),r._v(" "),t("p",[r._v("上面也提到SpringBoot是约定优于配置，怎么理解这个约定优于配置。也有人解读为：约定大于配置，约定好于配置，习惯大于配置等。"),t("br"),r._v("\n用SpringBoot框架开发程序时，框架提供的默认值会让我们的项目开发起来效率更快，如果默认值满足不了我们的需求，\n我们可以使用Properties配置文件和YAML配置文件来重写默认值来满足我们的需求，所以约定大于配置，是说通过约定来减少配置，\n从而提升开发效率。")]),r._v(" "),t("p",[r._v("而且约定大于配置，并不是一种新的思想，在JDK5.0发布，采用元数据 ，引入注解的概念（也称之为标注），\n就代表简化配置的开始，就是初期的一种 “约定优于配置” 的体现；所以约定优于配置这一设计理念，\n从Spring的注解版本就已经开始了。引入注解就是为了减少一些默认配置，引入注解也就代表着简化配置的开始，\n官方说基于Spring的基础就是这个事实。")]),r._v(" "),t("h2",{attrs:{id:"最后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[r._v("#")]),r._v(" 最后")]),r._v(" "),t("p",[r._v("好了，到此我们对SpringBoot也有了一个初步了解，下一步我们进一步学习SpringBoot。")])])}),[],!1,null,null,null);t.default=s.exports}}]);